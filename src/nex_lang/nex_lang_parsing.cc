#include "nex_lang_parsing.h"

#include <map>
#include <optional>
#include <variant>
#include <vector>

#include "compile_error.h"
#include "parse_earley.h"
#include "state.h"

struct Token;

static const std::map<NonTerminal, std::vector<Production>> productions = {
    {NonTerminal::s,
     {{NonTerminal::s,
       {Terminal::BOFS,
        NonTerminal::module,
        NonTerminal::imports,
        NonTerminal::typedecls,
        NonTerminal::fns,
        Terminal::EOFS}}}},
    {NonTerminal::module,
     {{NonTerminal::module, {Terminal::MODULE, Terminal::ID, Terminal::SEMI}}}},
    {NonTerminal::imports,
     {{NonTerminal::imports, {NonTerminal::import, NonTerminal::imports}},
      {NonTerminal::imports, {}}}},
    {NonTerminal::import,
     {{NonTerminal::import, {Terminal::IMPORT, Terminal::ID, Terminal::SEMI}}}},
    {NonTerminal::typedecls,
     {{NonTerminal::typedecls, {NonTerminal::typedecl, NonTerminal::typedecls}},
      {NonTerminal::typedecls, {}}}},
    {NonTerminal::typedecl,
     {{NonTerminal::typedecl,
       {Terminal::TYPE,
        Terminal::ID,
        Terminal::ASSIGN,
        NonTerminal::type,
        Terminal::SEMI}},
      {NonTerminal::typedecl,
       {Terminal::STRUCT,
        Terminal::ID,
        Terminal::LBRACE,
        NonTerminal::typestmts,
        Terminal::RBRACE}}}},
    {NonTerminal::typestmts,
     {
         {NonTerminal::typestmts,
          {NonTerminal::typestmt, NonTerminal::typestmts}},
         {NonTerminal::typestmts, {NonTerminal::typestmt}},
     }},
    {NonTerminal::typestmt,
     {{NonTerminal::typestmt,
       {Terminal::ID, Terminal::COLON, NonTerminal::type, Terminal::SEMI}}}},
    {NonTerminal::fns,
     {{NonTerminal::fns, {NonTerminal::fn, NonTerminal::fns}},
      {NonTerminal::fns, {NonTerminal::fn}}}},
    {NonTerminal::fn,
     {{NonTerminal::fn,
       {Terminal::FN,
        Terminal::ID,
        Terminal::LPAREN,
        NonTerminal::optparams,
        Terminal::RPAREN,
        Terminal::ARROW,
        NonTerminal::type,
        NonTerminal::stmtblock}},
      {NonTerminal::fn,
       {Terminal::FN,
        Terminal::ID,
        Terminal::LPAREN,
        NonTerminal::optparams,
        Terminal::RPAREN,
        NonTerminal::stmtblock}}}},
    {NonTerminal::optparams,
     {{NonTerminal::optparams, {NonTerminal::params}},
      {NonTerminal::optparams, {}}}},
    {NonTerminal::params,
     {{NonTerminal::params,
       {NonTerminal::vardef, Terminal::COMMA, NonTerminal::params}},
      {NonTerminal::params, {NonTerminal::vardef}}}},
    {NonTerminal::vardef,
     {{NonTerminal::vardef,
       {Terminal::ID, Terminal::COLON, NonTerminal::type}}}},
    {NonTerminal::type,
     {{NonTerminal::type, {Terminal::I32}},
      {NonTerminal::type, {Terminal::BOOL}},
      {NonTerminal::type, {Terminal::CHAR}},
      {NonTerminal::type, {Terminal::NONE}},
      {NonTerminal::type, {Terminal::ID}},
      {NonTerminal::type, {Terminal::STAR, NonTerminal::type}},
      {NonTerminal::type,
       {Terminal::LPAREN, NonTerminal::type, Terminal::RPAREN}}}},
    {NonTerminal::stmtblock,
     {{NonTerminal::stmtblock,
       {Terminal::LBRACE, NonTerminal::stmts, Terminal::RBRACE}}}},
    {NonTerminal::stmts,
     {{NonTerminal::stmts, {NonTerminal::stmt, NonTerminal::stmts}},
      {NonTerminal::stmts, {NonTerminal::stmt}}}},
    {NonTerminal::stmt,
     {{NonTerminal::stmt,
       {Terminal::LET,
        NonTerminal::vardef,
        Terminal::ASSIGN,
        NonTerminal::expr,
        Terminal::SEMI}},
      {NonTerminal::stmt,
       {Terminal::LET,
        Terminal::ID,
        Terminal::ASSIGN,
        NonTerminal::expr,
        Terminal::SEMI}},
      {NonTerminal::stmt,
       {NonTerminal::expr,
        Terminal::ASSIGN,
        NonTerminal::expr,
        Terminal::SEMI}},
      {NonTerminal::stmt, {NonTerminal::expr, Terminal::SEMI}},
      {NonTerminal::stmt,
       {Terminal::IF,
        Terminal::LPAREN,
        NonTerminal::expr,
        Terminal::RPAREN,
        NonTerminal::stmtblock,
        Terminal::ELSE,
        NonTerminal::stmtblock}},
      {NonTerminal::stmt,
       {Terminal::IF,
        Terminal::LPAREN,
        NonTerminal::expr,
        Terminal::RPAREN,
        NonTerminal::stmtblock}},
      {NonTerminal::stmt,
       {Terminal::WHILE,
        Terminal::LPAREN,
        NonTerminal::expr,
        Terminal::RPAREN,
        NonTerminal::stmtblock}},
      {NonTerminal::stmt, {Terminal::RET, NonTerminal::expr, Terminal::SEMI}},
      {NonTerminal::stmt,
       {Terminal::DELETE, NonTerminal::expr, Terminal::SEMI}}}},
    {NonTerminal::expr, {{NonTerminal::expr, {NonTerminal::exprp1}}}},
    {NonTerminal::exprp1,
     {{NonTerminal::exprp1, {NonTerminal::exprp2}},
      {NonTerminal::exprp1,
       {NonTerminal::exprp1, Terminal::OR, NonTerminal::exprp2}}}},
    {NonTerminal::exprp2,
     {{NonTerminal::exprp2, {NonTerminal::exprp3}},
      {NonTerminal::exprp2,
       {NonTerminal::exprp2, Terminal::AND, NonTerminal::exprp3}}}},
    {NonTerminal::exprp3,
     {{NonTerminal::exprp3, {NonTerminal::exprp4}},
      {NonTerminal::exprp3,
       {NonTerminal::exprp3, Terminal::EQ, NonTerminal::exprp4}},
      {NonTerminal::exprp3,
       {NonTerminal::exprp3, Terminal::NE, NonTerminal::exprp4}}}},
    {NonTerminal::exprp4,
     {{NonTerminal::exprp4, {NonTerminal::exprp5}},
      {NonTerminal::exprp4,
       {NonTerminal::exprp4, Terminal::LT, NonTerminal::exprp5}},
      {NonTerminal::exprp4,
       {NonTerminal::exprp4, Terminal::GT, NonTerminal::exprp5}},
      {NonTerminal::exprp4,
       {NonTerminal::exprp4, Terminal::LE, NonTerminal::exprp5}},
      {NonTerminal::exprp4,
       {NonTerminal::exprp4, Terminal::GE, NonTerminal::exprp5}}}},
    {NonTerminal::exprp5,
     {{NonTerminal::exprp5, {NonTerminal::exprp6}},
      {NonTerminal::exprp5,
       {NonTerminal::exprp5, Terminal::PLUS, NonTerminal::exprp6}},
      {NonTerminal::exprp5,
       {NonTerminal::exprp5, Terminal::MINUS, NonTerminal::exprp6}}}},
    {NonTerminal::exprp6,
     {{NonTerminal::exprp6, {NonTerminal::exprp7}},
      {NonTerminal::exprp6,
       {NonTerminal::exprp6, Terminal::STAR, NonTerminal::exprp7}},
      {NonTerminal::exprp6,
       {NonTerminal::exprp6, Terminal::SLASH, NonTerminal::exprp7}},
      {NonTerminal::exprp6,
       {NonTerminal::exprp6, Terminal::PCT, NonTerminal::exprp7}}}},
    {NonTerminal::exprp7,
     {{NonTerminal::exprp7, {NonTerminal::exprp8}},
      {NonTerminal::exprp7, {Terminal::NOT, NonTerminal::exprp8}},
      {NonTerminal::exprp7, {Terminal::STAR, NonTerminal::exprp8}}}},
    {NonTerminal::exprp8,
     {{NonTerminal::exprp8, {NonTerminal::exprp9}},
      {NonTerminal::exprp8,
       {NonTerminal::exprp8, Terminal::AS, NonTerminal::type}}}},
    {NonTerminal::exprp9,
     {
         {NonTerminal::exprp9, {Terminal::ID}},
         {NonTerminal::exprp9, {Terminal::ID, Terminal::DOT, Terminal::ID}},
         {NonTerminal::exprp9, {Terminal::NUM}},
         {NonTerminal::exprp9, {Terminal::MINUS, Terminal::NUM}},
         {NonTerminal::exprp9, {Terminal::TRUE}},
         {NonTerminal::exprp9, {Terminal::FALSE}},
         {NonTerminal::exprp9, {Terminal::AMPERSAND, Terminal::ID}},
         {NonTerminal::exprp9, {Terminal::STRLITERAL}},
         {NonTerminal::exprp9, {Terminal::CHARLITERAL}},
         {NonTerminal::exprp9,
          {Terminal::LPAREN, NonTerminal::expr, Terminal::RPAREN}},
         {NonTerminal::exprp9,
          {Terminal::ID,
           Terminal::LPAREN,
           NonTerminal::optargs,
           Terminal::RPAREN}},
         {NonTerminal::exprp9,
          {Terminal::ID,
           Terminal::DOT,
           Terminal::ID,
           Terminal::LPAREN,
           NonTerminal::optargs,
           Terminal::RPAREN}},
         {NonTerminal::exprp9, {Terminal::NEW, NonTerminal::typeinit}},
         {NonTerminal::exprp9,
          {NonTerminal::exprp9,
           Terminal::LBRACKET,
           NonTerminal::expr,
           Terminal::RBRACKET}},
     }},
    {NonTerminal::optargs,
     {{NonTerminal::optargs, {NonTerminal::args}}, {NonTerminal::optargs, {}}}},
    {NonTerminal::args,
     {{NonTerminal::args,
       {NonTerminal::expr, Terminal::COMMA, NonTerminal::args}},
      {NonTerminal::args, {NonTerminal::expr}}}},
    {NonTerminal::typeinit,
     {
         {NonTerminal::typeinit, {NonTerminal::type}},
         {NonTerminal::typeinit,
          {NonTerminal::type,
           Terminal::LBRACKET,
           NonTerminal::expr,
           Terminal::RBRACKET}},
     }}};

static const Grammar nex_lang_grammar {
    .start = NonTerminal::s,
    .productions = productions,
};

Grammar make_nex_lang_grammar() {
    return nex_lang_grammar;
}

ASTNode parse(std::span<Token> input) {
    Grammar grammar = nex_lang_grammar;
    std::optional<ASTNode> result = parse_earley(input, grammar);
    if (result) {
        return result.value();
    }
    throw CompileError("Unknown parsing error.", 0);
}
